// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/struct.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/LCGPBDescriptor.h>
 #import <protobuf/LCGPBMessage.h>
 #import <protobuf/LCGPBRootObject.h>
#else
 #import "LCGPBDescriptor.h"
 #import "LCGPBMessage.h"
 #import "LCGPBRootObject.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class LCGPBListValue;
@class LCGPBStruct;
@class LCGPBValue;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum LCGPBNullValue

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 *  The JSON representation for `NullValue` is JSON `null`.
 **/
typedef LCGPB_ENUM(LCGPBNullValue) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  LCGPBNullValue_LCGPBUnrecognizedEnumeratorValue = kLCGPBUnrecognizedEnumeratorValue,
  /** Null value. */
  LCGPBNullValue_NullValue = 0,
};

LCGPBEnumDescriptor *LCGPBNullValue_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LCGPBNullValue_IsValidValue(int32_t value);

#pragma mark - LCGPBStructRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (LCGPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c LCGPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface LCGPBStructRoot : LCGPBRootObject
@end

#pragma mark - LCGPBStruct

typedef LCGPB_ENUM(LCGPBStruct_FieldNumber) {
  LCGPBStruct_FieldNumber_Fields = 1,
};

/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is JSON object.
 **/
@interface LCGPBStruct : LCGPBMessage

/** Unordered map of dynamically typed values. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, LCGPBValue*> *fields;
/** The number of items in @c fields without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fields_Count;

@end

#pragma mark - LCGPBValue

typedef LCGPB_ENUM(LCGPBValue_FieldNumber) {
  LCGPBValue_FieldNumber_NullValue = 1,
  LCGPBValue_FieldNumber_NumberValue = 2,
  LCGPBValue_FieldNumber_StringValue = 3,
  LCGPBValue_FieldNumber_BoolValue = 4,
  LCGPBValue_FieldNumber_StructValue = 5,
  LCGPBValue_FieldNumber_ListValue = 6,
};

typedef LCGPB_ENUM(LCGPBValue_Kind_OneOfCase) {
  LCGPBValue_Kind_OneOfCase_LCGPBUnsetOneOfCase = 0,
  LCGPBValue_Kind_OneOfCase_NullValue = 1,
  LCGPBValue_Kind_OneOfCase_NumberValue = 2,
  LCGPBValue_Kind_OneOfCase_StringValue = 3,
  LCGPBValue_Kind_OneOfCase_BoolValue = 4,
  LCGPBValue_Kind_OneOfCase_StructValue = 5,
  LCGPBValue_Kind_OneOfCase_ListValue = 6,
};

/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of that
 * variants, absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is JSON value.
 **/
@interface LCGPBValue : LCGPBMessage

/** The kind of value. */
@property(nonatomic, readonly) LCGPBValue_Kind_OneOfCase kindOneOfCase;

/** Represents a null value. */
@property(nonatomic, readwrite) LCGPBNullValue nullValue;

/** Represents a double value. */
@property(nonatomic, readwrite) double numberValue;

/** Represents a string value. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stringValue;

/** Represents a boolean value. */
@property(nonatomic, readwrite) BOOL boolValue;

/** Represents a structured value. */
@property(nonatomic, readwrite, strong, null_resettable) LCGPBStruct *structValue;

/** Represents a repeated `Value`. */
@property(nonatomic, readwrite, strong, null_resettable) LCGPBListValue *listValue;

@end

/**
 * Fetches the raw value of a @c LCGPBValue's @c nullValue property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LCGPBValue_NullValue_RawValue(LCGPBValue *message);
/**
 * Sets the raw value of an @c LCGPBValue's @c nullValue property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLCGPBValue_NullValue_RawValue(LCGPBValue *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'kind'.
 **/
void LCGPBValue_ClearKindOneOfCase(LCGPBValue *message);

#pragma mark - LCGPBListValue

typedef LCGPB_ENUM(LCGPBListValue_FieldNumber) {
  LCGPBListValue_FieldNumber_ValuesArray = 1,
};

/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 **/
@interface LCGPBListValue : LCGPBMessage

/** Repeated field of dynamically typed values. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LCGPBValue*> *valuesArray;
/** The number of items in @c valuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger valuesArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
