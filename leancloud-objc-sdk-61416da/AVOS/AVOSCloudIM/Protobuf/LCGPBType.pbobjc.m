// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/type.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/LCGPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "LCGPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#if LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/Type.pbobjc.h>
 #import <protobuf/Any.pbobjc.h>
 #import <protobuf/SourceContext.pbobjc.h>
#else
 #import "LCGPBType.pbobjc.h"
 #import "LCGPBAny.pbobjc.h"
 #import "LCGPBSourceContext.pbobjc.h"
#endif
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LCGPBTypeRoot

@implementation LCGPBTypeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - LCGPBTypeRoot_FileDescriptor

static LCGPBFileDescriptor *LCGPBTypeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static LCGPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    LCGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[LCGPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                 objcPrefix:@"LCGPB"
                                                     syntax:LCGPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum LCGPBSyntax

LCGPBEnumDescriptor *LCGPBSyntax_EnumDescriptor(void) {
  static _Atomic(LCGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SyntaxProto2\000SyntaxProto3\000";
    static const int32_t values[] = {
        LCGPBSyntax_SyntaxProto2,
        LCGPBSyntax_SyntaxProto3,
    };
    LCGPBEnumDescriptor *worker =
        [LCGPBEnumDescriptor allocDescriptorForName:LCGPBNSStringifySymbol(LCGPBSyntax)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LCGPBSyntax_IsValidValue];
    LCGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LCGPBSyntax_IsValidValue(int32_t value__) {
  switch (value__) {
    case LCGPBSyntax_SyntaxProto2:
    case LCGPBSyntax_SyntaxProto3:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - LCGPBType

@implementation LCGPBType

@dynamic name;
@dynamic fieldsArray, fieldsArray_Count;
@dynamic oneofsArray, oneofsArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic hasSourceContext, sourceContext;
@dynamic syntax;

typedef struct LCGPBType__storage_ {
  uint32_t _has_storage_[1];
  LCGPBSyntax syntax;
  NSString *name;
  NSMutableArray *fieldsArray;
  NSMutableArray *oneofsArray;
  NSMutableArray *optionsArray;
  LCGPBSourceContext *sourceContext;
} LCGPBType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (LCGPBDescriptor *)descriptor {
  static LCGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static LCGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBType_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LCGPBType__storage_, name),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "fieldsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBField),
        .number = LCGPBType_FieldNumber_FieldsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBType__storage_, fieldsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "oneofsArray",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBType_FieldNumber_OneofsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBType__storage_, oneofsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBOption),
        .number = LCGPBType_FieldNumber_OptionsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBType__storage_, optionsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBSourceContext),
        .number = LCGPBType_FieldNumber_SourceContext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LCGPBType__storage_, sourceContext),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = LCGPBSyntax_EnumDescriptor,
        .number = LCGPBType_FieldNumber_Syntax,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LCGPBType__storage_, syntax),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldHasEnumDescriptor),
        .dataType = LCGPBDataTypeEnum,
      },
    };
    LCGPBDescriptor *localDescriptor =
        [LCGPBDescriptor allocDescriptorForClass:[LCGPBType class]
                                     rootClass:[LCGPBTypeRoot class]
                                          file:LCGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(LCGPBMessageFieldDescription))
                                   storageSize:sizeof(LCGPBType__storage_)
                                         flags:LCGPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LCGPBType_Syntax_RawValue(LCGPBType *message) {
  LCGPBDescriptor *descriptor = [LCGPBType descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBType_FieldNumber_Syntax];
  return LCGPBGetMessageInt32Field(message, field);
}

void SetLCGPBType_Syntax_RawValue(LCGPBType *message, int32_t value) {
  LCGPBDescriptor *descriptor = [LCGPBType descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBType_FieldNumber_Syntax];
  LCGPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LCGPBField

@implementation LCGPBField

@dynamic kind;
@dynamic cardinality;
@dynamic number;
@dynamic name;
@dynamic typeURL;
@dynamic oneofIndex;
@dynamic packed;
@dynamic optionsArray, optionsArray_Count;
@dynamic jsonName;
@dynamic defaultValue;

typedef struct LCGPBField__storage_ {
  uint32_t _has_storage_[1];
  LCGPBField_Kind kind;
  LCGPBField_Cardinality cardinality;
  int32_t number;
  int32_t oneofIndex;
  NSString *name;
  NSString *typeURL;
  NSMutableArray *optionsArray;
  NSString *jsonName;
  NSString *defaultValue;
} LCGPBField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (LCGPBDescriptor *)descriptor {
  static LCGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static LCGPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = LCGPBField_Kind_EnumDescriptor,
        .number = LCGPBField_FieldNumber_Kind,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, kind),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldHasEnumDescriptor),
        .dataType = LCGPBDataTypeEnum,
      },
      {
        .name = "cardinality",
        .dataTypeSpecific.enumDescFunc = LCGPBField_Cardinality_EnumDescriptor,
        .number = LCGPBField_FieldNumber_Cardinality,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, cardinality),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldHasEnumDescriptor),
        .dataType = LCGPBDataTypeEnum,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBField_FieldNumber_Number,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, number),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBField_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, name),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "typeURL",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBField_FieldNumber_TypeURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, typeURL),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldTextFormatNameCustom),
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "oneofIndex",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBField_FieldNumber_OneofIndex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, oneofIndex),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeInt32,
      },
      {
        .name = "packed",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBField_FieldNumber_Packed,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeBool,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBOption),
        .number = LCGPBField_FieldNumber_OptionsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, optionsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "jsonName",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBField_FieldNumber_JsonName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, jsonName),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "defaultValue",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBField_FieldNumber_DefaultValue,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(LCGPBField__storage_, defaultValue),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
    };
    LCGPBDescriptor *localDescriptor =
        [LCGPBDescriptor allocDescriptorForClass:[LCGPBField class]
                                     rootClass:[LCGPBTypeRoot class]
                                          file:LCGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(LCGPBMessageFieldDescription))
                                   storageSize:sizeof(LCGPBField__storage_)
                                         flags:LCGPBDescriptorInitializationFlag_None];
#if !LCGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !LCGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LCGPBField_Kind_RawValue(LCGPBField *message) {
  LCGPBDescriptor *descriptor = [LCGPBField descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBField_FieldNumber_Kind];
  return LCGPBGetMessageInt32Field(message, field);
}

void SetLCGPBField_Kind_RawValue(LCGPBField *message, int32_t value) {
  LCGPBDescriptor *descriptor = [LCGPBField descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBField_FieldNumber_Kind];
  LCGPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t LCGPBField_Cardinality_RawValue(LCGPBField *message) {
  LCGPBDescriptor *descriptor = [LCGPBField descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBField_FieldNumber_Cardinality];
  return LCGPBGetMessageInt32Field(message, field);
}

void SetLCGPBField_Cardinality_RawValue(LCGPBField *message, int32_t value) {
  LCGPBDescriptor *descriptor = [LCGPBField descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBField_FieldNumber_Cardinality];
  LCGPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum LCGPBField_Kind

LCGPBEnumDescriptor *LCGPBField_Kind_EnumDescriptor(void) {
  static _Atomic(LCGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeUnknown\000TypeDouble\000TypeFloat\000TypeInt"
        "64\000TypeUint64\000TypeInt32\000TypeFixed64\000Type"
        "Fixed32\000TypeBool\000TypeString\000TypeGroup\000Ty"
        "peMessage\000TypeBytes\000TypeUint32\000TypeEnum\000"
        "TypeSfixed32\000TypeSfixed64\000TypeSint32\000Typ"
        "eSint64\000";
    static const int32_t values[] = {
        LCGPBField_Kind_TypeUnknown,
        LCGPBField_Kind_TypeDouble,
        LCGPBField_Kind_TypeFloat,
        LCGPBField_Kind_TypeInt64,
        LCGPBField_Kind_TypeUint64,
        LCGPBField_Kind_TypeInt32,
        LCGPBField_Kind_TypeFixed64,
        LCGPBField_Kind_TypeFixed32,
        LCGPBField_Kind_TypeBool,
        LCGPBField_Kind_TypeString,
        LCGPBField_Kind_TypeGroup,
        LCGPBField_Kind_TypeMessage,
        LCGPBField_Kind_TypeBytes,
        LCGPBField_Kind_TypeUint32,
        LCGPBField_Kind_TypeEnum,
        LCGPBField_Kind_TypeSfixed32,
        LCGPBField_Kind_TypeSfixed64,
        LCGPBField_Kind_TypeSint32,
        LCGPBField_Kind_TypeSint64,
    };
    LCGPBEnumDescriptor *worker =
        [LCGPBEnumDescriptor allocDescriptorForName:LCGPBNSStringifySymbol(LCGPBField_Kind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LCGPBField_Kind_IsValidValue];
    LCGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LCGPBField_Kind_IsValidValue(int32_t value__) {
  switch (value__) {
    case LCGPBField_Kind_TypeUnknown:
    case LCGPBField_Kind_TypeDouble:
    case LCGPBField_Kind_TypeFloat:
    case LCGPBField_Kind_TypeInt64:
    case LCGPBField_Kind_TypeUint64:
    case LCGPBField_Kind_TypeInt32:
    case LCGPBField_Kind_TypeFixed64:
    case LCGPBField_Kind_TypeFixed32:
    case LCGPBField_Kind_TypeBool:
    case LCGPBField_Kind_TypeString:
    case LCGPBField_Kind_TypeGroup:
    case LCGPBField_Kind_TypeMessage:
    case LCGPBField_Kind_TypeBytes:
    case LCGPBField_Kind_TypeUint32:
    case LCGPBField_Kind_TypeEnum:
    case LCGPBField_Kind_TypeSfixed32:
    case LCGPBField_Kind_TypeSfixed64:
    case LCGPBField_Kind_TypeSint32:
    case LCGPBField_Kind_TypeSint64:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum LCGPBField_Cardinality

LCGPBEnumDescriptor *LCGPBField_Cardinality_EnumDescriptor(void) {
  static _Atomic(LCGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CardinalityUnknown\000CardinalityOptional\000C"
        "ardinalityRequired\000CardinalityRepeated\000";
    static const int32_t values[] = {
        LCGPBField_Cardinality_CardinalityUnknown,
        LCGPBField_Cardinality_CardinalityOptional,
        LCGPBField_Cardinality_CardinalityRequired,
        LCGPBField_Cardinality_CardinalityRepeated,
    };
    LCGPBEnumDescriptor *worker =
        [LCGPBEnumDescriptor allocDescriptorForName:LCGPBNSStringifySymbol(LCGPBField_Cardinality)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LCGPBField_Cardinality_IsValidValue];
    LCGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LCGPBField_Cardinality_IsValidValue(int32_t value__) {
  switch (value__) {
    case LCGPBField_Cardinality_CardinalityUnknown:
    case LCGPBField_Cardinality_CardinalityOptional:
    case LCGPBField_Cardinality_CardinalityRequired:
    case LCGPBField_Cardinality_CardinalityRepeated:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - LCGPBEnum

@implementation LCGPBEnum

@dynamic name;
@dynamic enumvalueArray, enumvalueArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic hasSourceContext, sourceContext;
@dynamic syntax;

typedef struct LCGPBEnum__storage_ {
  uint32_t _has_storage_[1];
  LCGPBSyntax syntax;
  NSString *name;
  NSMutableArray *enumvalueArray;
  NSMutableArray *optionsArray;
  LCGPBSourceContext *sourceContext;
} LCGPBEnum__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (LCGPBDescriptor *)descriptor {
  static LCGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static LCGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBEnum_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LCGPBEnum__storage_, name),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "enumvalueArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBEnumValue),
        .number = LCGPBEnum_FieldNumber_EnumvalueArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBEnum__storage_, enumvalueArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBOption),
        .number = LCGPBEnum_FieldNumber_OptionsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBEnum__storage_, optionsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBSourceContext),
        .number = LCGPBEnum_FieldNumber_SourceContext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LCGPBEnum__storage_, sourceContext),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = LCGPBSyntax_EnumDescriptor,
        .number = LCGPBEnum_FieldNumber_Syntax,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LCGPBEnum__storage_, syntax),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldHasEnumDescriptor),
        .dataType = LCGPBDataTypeEnum,
      },
    };
    LCGPBDescriptor *localDescriptor =
        [LCGPBDescriptor allocDescriptorForClass:[LCGPBEnum class]
                                     rootClass:[LCGPBTypeRoot class]
                                          file:LCGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(LCGPBMessageFieldDescription))
                                   storageSize:sizeof(LCGPBEnum__storage_)
                                         flags:LCGPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LCGPBEnum_Syntax_RawValue(LCGPBEnum *message) {
  LCGPBDescriptor *descriptor = [LCGPBEnum descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBEnum_FieldNumber_Syntax];
  return LCGPBGetMessageInt32Field(message, field);
}

void SetLCGPBEnum_Syntax_RawValue(LCGPBEnum *message, int32_t value) {
  LCGPBDescriptor *descriptor = [LCGPBEnum descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBEnum_FieldNumber_Syntax];
  LCGPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LCGPBEnumValue

@implementation LCGPBEnumValue

@dynamic name;
@dynamic number;
@dynamic optionsArray, optionsArray_Count;

typedef struct LCGPBEnumValue__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  NSString *name;
  NSMutableArray *optionsArray;
} LCGPBEnumValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (LCGPBDescriptor *)descriptor {
  static LCGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static LCGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBEnumValue_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LCGPBEnumValue__storage_, name),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBEnumValue_FieldNumber_Number,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LCGPBEnumValue__storage_, number),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeInt32,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBOption),
        .number = LCGPBEnumValue_FieldNumber_OptionsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBEnumValue__storage_, optionsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
    };
    LCGPBDescriptor *localDescriptor =
        [LCGPBDescriptor allocDescriptorForClass:[LCGPBEnumValue class]
                                     rootClass:[LCGPBTypeRoot class]
                                          file:LCGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(LCGPBMessageFieldDescription))
                                   storageSize:sizeof(LCGPBEnumValue__storage_)
                                         flags:LCGPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LCGPBOption

@implementation LCGPBOption

@dynamic name;
@dynamic hasValue, value;

typedef struct LCGPBOption__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  LCGPBAny *value;
} LCGPBOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (LCGPBDescriptor *)descriptor {
  static LCGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static LCGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBOption_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LCGPBOption__storage_, name),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBAny),
        .number = LCGPBOption_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LCGPBOption__storage_, value),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeMessage,
      },
    };
    LCGPBDescriptor *localDescriptor =
        [LCGPBDescriptor allocDescriptorForClass:[LCGPBOption class]
                                     rootClass:[LCGPBTypeRoot class]
                                          file:LCGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(LCGPBMessageFieldDescription))
                                   storageSize:sizeof(LCGPBOption__storage_)
                                         flags:LCGPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
