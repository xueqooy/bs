// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/LCGPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "LCGPBProtocolBuffers_RuntimeSupport.h"
#endif

#if LCGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/Api.pbobjc.h>
 #import <protobuf/SourceContext.pbobjc.h>
 #import <protobuf/Type.pbobjc.h>
#else
 #import "LCGPBApi.pbobjc.h"
 #import "LCGPBSourceContext.pbobjc.h"
 #import "LCGPBType.pbobjc.h"
#endif
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LCGPBApiRoot

@implementation LCGPBApiRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - LCGPBApiRoot_FileDescriptor

static LCGPBFileDescriptor *LCGPBApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static LCGPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    LCGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[LCGPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                 objcPrefix:@"LCGPB"
                                                     syntax:LCGPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - LCGPBApi

@implementation LCGPBApi

@dynamic name;
@dynamic methodsArray, methodsArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic version;
@dynamic hasSourceContext, sourceContext;
@dynamic mixinsArray, mixinsArray_Count;
@dynamic syntax;

typedef struct LCGPBApi__storage_ {
  uint32_t _has_storage_[1];
  LCGPBSyntax syntax;
  NSString *name;
  NSMutableArray *methodsArray;
  NSMutableArray *optionsArray;
  NSString *version;
  LCGPBSourceContext *sourceContext;
  NSMutableArray *mixinsArray;
} LCGPBApi__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (LCGPBDescriptor *)descriptor {
  static LCGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static LCGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBApi_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LCGPBApi__storage_, name),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "methodsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBMethod),
        .number = LCGPBApi_FieldNumber_MethodsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBApi__storage_, methodsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBOption),
        .number = LCGPBApi_FieldNumber_OptionsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBApi__storage_, optionsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBApi_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LCGPBApi__storage_, version),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBSourceContext),
        .number = LCGPBApi_FieldNumber_SourceContext,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LCGPBApi__storage_, sourceContext),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "mixinsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBMixin),
        .number = LCGPBApi_FieldNumber_MixinsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBApi__storage_, mixinsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = LCGPBSyntax_EnumDescriptor,
        .number = LCGPBApi_FieldNumber_Syntax,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LCGPBApi__storage_, syntax),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldHasEnumDescriptor),
        .dataType = LCGPBDataTypeEnum,
      },
    };
    LCGPBDescriptor *localDescriptor =
        [LCGPBDescriptor allocDescriptorForClass:[LCGPBApi class]
                                     rootClass:[LCGPBApiRoot class]
                                          file:LCGPBApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(LCGPBMessageFieldDescription))
                                   storageSize:sizeof(LCGPBApi__storage_)
                                         flags:LCGPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LCGPBApi_Syntax_RawValue(LCGPBApi *message) {
  LCGPBDescriptor *descriptor = [LCGPBApi descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBApi_FieldNumber_Syntax];
  return LCGPBGetMessageInt32Field(message, field);
}

void SetLCGPBApi_Syntax_RawValue(LCGPBApi *message, int32_t value) {
  LCGPBDescriptor *descriptor = [LCGPBApi descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBApi_FieldNumber_Syntax];
  LCGPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LCGPBMethod

@implementation LCGPBMethod

@dynamic name;
@dynamic requestTypeURL;
@dynamic requestStreaming;
@dynamic responseTypeURL;
@dynamic responseStreaming;
@dynamic optionsArray, optionsArray_Count;
@dynamic syntax;

typedef struct LCGPBMethod__storage_ {
  uint32_t _has_storage_[1];
  LCGPBSyntax syntax;
  NSString *name;
  NSString *requestTypeURL;
  NSString *responseTypeURL;
  NSMutableArray *optionsArray;
} LCGPBMethod__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (LCGPBDescriptor *)descriptor {
  static LCGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static LCGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBMethod_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LCGPBMethod__storage_, name),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "requestTypeURL",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBMethod_FieldNumber_RequestTypeURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LCGPBMethod__storage_, requestTypeURL),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldTextFormatNameCustom),
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "requestStreaming",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBMethod_FieldNumber_RequestStreaming,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeBool,
      },
      {
        .name = "responseTypeURL",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBMethod_FieldNumber_ResponseTypeURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LCGPBMethod__storage_, responseTypeURL),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldTextFormatNameCustom),
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "responseStreaming",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBMethod_FieldNumber_ResponseStreaming,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeBool,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = LCGPBStringifySymbol(LCGPBOption),
        .number = LCGPBMethod_FieldNumber_OptionsArray,
        .hasIndex = LCGPBNoHasBit,
        .offset = (uint32_t)offsetof(LCGPBMethod__storage_, optionsArray),
        .flags = LCGPBFieldRepeated,
        .dataType = LCGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = LCGPBSyntax_EnumDescriptor,
        .number = LCGPBMethod_FieldNumber_Syntax,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(LCGPBMethod__storage_, syntax),
        .flags = (LCGPBFieldFlags)(LCGPBFieldOptional | LCGPBFieldHasEnumDescriptor),
        .dataType = LCGPBDataTypeEnum,
      },
    };
    LCGPBDescriptor *localDescriptor =
        [LCGPBDescriptor allocDescriptorForClass:[LCGPBMethod class]
                                     rootClass:[LCGPBApiRoot class]
                                          file:LCGPBApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(LCGPBMessageFieldDescription))
                                   storageSize:sizeof(LCGPBMethod__storage_)
                                         flags:LCGPBDescriptorInitializationFlag_None];
#if !LCGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\244\241!!\000\004\010\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !LCGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LCGPBMethod_Syntax_RawValue(LCGPBMethod *message) {
  LCGPBDescriptor *descriptor = [LCGPBMethod descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBMethod_FieldNumber_Syntax];
  return LCGPBGetMessageInt32Field(message, field);
}

void SetLCGPBMethod_Syntax_RawValue(LCGPBMethod *message, int32_t value) {
  LCGPBDescriptor *descriptor = [LCGPBMethod descriptor];
  LCGPBFieldDescriptor *field = [descriptor fieldWithNumber:LCGPBMethod_FieldNumber_Syntax];
  LCGPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LCGPBMixin

@implementation LCGPBMixin

@dynamic name;
@dynamic root;

typedef struct LCGPBMixin__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *root;
} LCGPBMixin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (LCGPBDescriptor *)descriptor {
  static LCGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static LCGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBMixin_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LCGPBMixin__storage_, name),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
      {
        .name = "root",
        .dataTypeSpecific.className = NULL,
        .number = LCGPBMixin_FieldNumber_Root,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LCGPBMixin__storage_, root),
        .flags = LCGPBFieldOptional,
        .dataType = LCGPBDataTypeString,
      },
    };
    LCGPBDescriptor *localDescriptor =
        [LCGPBDescriptor allocDescriptorForClass:[LCGPBMixin class]
                                     rootClass:[LCGPBApiRoot class]
                                          file:LCGPBApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(LCGPBMessageFieldDescription))
                                   storageSize:sizeof(LCGPBMixin__storage_)
                                         flags:LCGPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
